generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id
  username       String          @unique
  email          String          @unique
  bio            String?
  showActivity   Boolean         @default(true) // Whether to show user activity publicly
  createdAt      DateTime        @default(now())
  instagram      String?
  twitter        String?
  updatedAt      DateTime        @updatedAt

  episodeReviews EpisodeReview[]
  favorites      Favorite[]
  likes          Like[]
  Rating         Rating[]
  reviewComments ReviewComment[]
  seasonReviews  SeasonReview[]
  showReviews    ShowReview[]
  watched        Watched[]
  watchLists     WatchList[]
  watchListComments WatchListComment[]
  discussions    Discussion[]
  discussionComments DiscussionComment[]
  discussionCommentVotes DiscussionCommentVote[]
  reactions      Reaction[]
  pollVotes      PollVote[]
  topFourShows   UserTopFourShow[]
  predictions    Prediction[]
  predictionComments PredictionComment[]
  predictionCommentVotes PredictionCommentVote[]
  predictionCommentReactions PredictionCommentReaction[]
  predictionShares PredictionShare[]
  predictionReactions PredictionReaction[]
  activities       UserActivity[]
  giverActivities  UserActivity[] @relation("ActivityGiver")
  points           UserPoints?
  pointsTransactions PointsTransaction[]
  activityPrivacy  UserActivityPrivacy[]

  @@index([username])
  @@index([email])
}

model Show {
  id               Int               @id @default(autoincrement())
  tmdbId           Int               @unique
  name             String
  overview         String?
  firstAirDate     DateTime?
  originCountry    String[]
  isCompetition    Boolean           @default(false)
  showType         String?
  backdropPath     String?
  isRunning        Boolean           @default(false)
  posterPath       String?
  tagline          String?
  tmdbRating       Float?
  originalLanguage String[]

  favorites        Favorite[]
  ratings          Rating[]
  seasons          Season[]
  creator          ShowCreator[]
  showReviews      ShowReview[]

  ShowsOnNetworks  ShowsOnNetworks[]
  watched          Watched[]
  watchListShows   WatchListShow[]
  discussions      Discussion[]
  lastCheckedForUpdate ShowLastCheckedForUpdate?
  updateLogs       UpdateShowsLog[]
  topFourShows     UserTopFourShow[]
}

model ShowLastCheckedForUpdate {
  id        Int      @id @default(autoincrement())
  showId    Int      @unique
  lastChecked DateTime @default(now())
  show      Show     @relation(fields: [showId], references: [id], onDelete: Cascade)
}

model UpdateShowsLog {
  id          Int      @id @default(autoincrement())
  showId      Int
  show        Show     @relation(fields: [showId], references: [id], onDelete: Cascade)
  entityType  String   // "show", "season", "episode", "character", "creator", "network"
  entityId    Int?     // ID of the specific entity that was updated (null for show-level updates)
  action      String   // "created", "updated", "deleted"
  fieldName   String?  // Specific field that was updated (null for entity-level actions)
  oldValue    String?  // Previous value (for updates)
  newValue    String?  // New value (for updates/creates)
  createdAt   DateTime @default(now())

  @@index([showId, createdAt])
  @@index([entityType, action])
}

model UserTopFourShow {
  id        Int      @id @default(autoincrement())
  userId    String
  showId    Int
  position  Int      // 1-4 to maintain order of top 4 shows
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  show      Show     @relation(fields: [showId], references: [id], onDelete: Cascade)
  
  @@unique([userId, showId]) // Prevent duplicate shows for same user
  @@unique([userId, position]) // Ensure only one show per position for each user
  @@index([userId, position])
}

model Season {
  id            Int            @id @default(autoincrement())
  seasonNumber  Int
  episodeCount  Int
  airDate       DateTime?
  showId        Int
  posterPath    String?
  tmdbRating    Float?
  overview      String?
  characters    Character[]

  episodes      Episode[]
  favorites     Favorite[]
  ratings       Rating[]
  show          Show           @relation(fields: [showId], references: [id])
  seasonReviews SeasonReview[]

  watched       Watched[]
  watchListShows WatchListShowSeason[]
  discussions   Discussion[]

  @@unique([showId, seasonNumber])
}

model Episode {
  id             Int             @id @default(autoincrement())
  seasonId       Int
  episodeNumber  Int
  name           String
  overview       String?
  airDate        DateTime?
  stillPath      String?
  tmdbRating     Float?

  season         Season          @relation(fields: [seasonId], references: [id])
  episodeReviews EpisodeReview[]

  favorites      Favorite[]
  ratings        Rating[]
  watched        Watched[]
  discussions    Discussion[]
  reactions      Reaction[]
  predictions    Prediction[]

  @@unique([seasonId, episodeNumber])
}

model Person {
  id          Int         @id
  name        String
  profilePath String?
  characters  Character[]
}

model Character {
  id             Int                      @id @default(autoincrement())
  seasonId       Int
  personId       Int
  showRole       String?
  person         Person                   @relation(fields: [personId], references: [id])
  season         Season                   @relation(fields: [seasonId], references: [id])
  tags           CharacterTag[]

  favorites      Favorite[]
  predictions    Prediction[]
  seasonReviews  SeasonReviewCharacter[]
  showReviews    ShowReviewCharacter[]
}

model Creator {
  id           Int           @id
  name         String
  originalName String        @map("original_name")
  profilePath  String?       @map("profile_path")
  shows        ShowCreator[]
}

model ShowCreator {
  showId    Int
  creatorId Int
  creator   Creator @relation(fields: [creatorId], references: [id])
  show      Show    @relation(fields: [showId], references: [id])

  @@id([showId, creatorId])
}

model Rating {
  id        Int      @id @default(autoincrement())
  userId    String
  rating    Float
  showId    Int?
  seasonId  Int?
  episodeId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  episode   Episode? @relation(fields: [episodeId], references: [id])
  season    Season?  @relation(fields: [seasonId], references: [id])
  show      Show?    @relation(fields: [showId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, showId])
  @@unique([userId, seasonId])
  @@unique([userId, episodeId])
}

model Favorite {
  id          Int        @id @default(autoincrement())
  userId      String
  showId      Int?
  seasonId    Int?
  episodeId   Int?
  createdAt   DateTime   @default(now())
  characterId Int?
  character   Character? @relation(fields: [characterId], references: [id])
  episode     Episode?   @relation(fields: [episodeId], references: [id])
  season      Season?    @relation(fields: [seasonId], references: [id])
  show        Show?      @relation(fields: [showId], references: [id])
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Watched {
  id        Int      @id @default(autoincrement())
  userId    String
  showId    Int?
  seasonId  Int?
  episodeId Int?
  createdAt DateTime @default(now())
  episode   Episode? @relation(fields: [episodeId], references: [id])
  season    Season?  @relation(fields: [seasonId], references: [id])
  show      Show?    @relation(fields: [showId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, showId])
  @@unique([userId, seasonId])
  @@unique([userId, episodeId])
}

model Tag {
  id             Int                @id @default(autoincrement())
  name           String             @unique
  characters     CharacterTag[]
  episodeReviews EpisodeReviewTag[]

  seasonReviews  SeasonReviewTag[]
  showReviews    ShowReviewTag[]
  watchLists     WatchListTag[]
  discussions    DiscussionTag[]
}



model CharacterTag {
  id          Int       @id @default(autoincrement())
  characterId Int
  tagId       Int
  character   Character @relation(fields: [characterId], references: [id])
  tag         Tag       @relation(fields: [tagId], references: [id])

  @@unique([characterId, tagId])
}



model Network {
  id              Int               @id
  name            String
  logoPath        String?
  originCountry   String?
  homepage        String?
  ShowsOnNetworks ShowsOnNetworks[]
}

model ShowsOnNetworks {
  showId    Int
  networkId Int
  network   Network @relation(fields: [networkId], references: [id])
  show      Show    @relation(fields: [showId], references: [id])

  @@id([showId, networkId])
}

model ShowReview {
  id                  Int                   @id @default(autoincrement())
  content             String
  userId              String
  showId              Int
  startedOn           DateTime?
  endedOn             DateTime?
  spoiler             Boolean               @default(false)
  createdAt           DateTime              @default(now())
  likes               Like[]
  comments            ReviewComment[]
  show                Show                  @relation(fields: [showId], references: [id])
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  favouriteCharacters ShowReviewCharacter[]
  tags                ShowReviewTag[]
}

model SeasonReview {
  id                  Int                     @id @default(autoincrement())
  content             String
  userId              String
  seasonId            Int
  startedOn           DateTime?
  endedOn             DateTime?
  spoiler             Boolean                 @default(false)
  createdAt           DateTime                @default(now())
  likes               Like[]
  comments            ReviewComment[]
  season              Season                  @relation(fields: [seasonId], references: [id])
  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  favouriteCharacters SeasonReviewCharacter[]
  tags                SeasonReviewTag[]
}

model EpisodeReview {
  id                  Int                      @id @default(autoincrement())
  content             String
  userId              String
  episodeId           Int
  watchedOn           DateTime?
  spoiler             Boolean                  @default(false)
  createdAt           DateTime                 @default(now())
  episode             Episode                  @relation(fields: [episodeId], references: [id])
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  tags                EpisodeReviewTag[]
  likes               Like[]
  comments            ReviewComment[]
}

model ShowReviewCharacter {
  id           Int        @id @default(autoincrement())
  showReviewId Int
  characterId  Int
  character    Character  @relation(fields: [characterId], references: [id])
  showReview   ShowReview @relation(fields: [showReviewId], references: [id], onDelete: Cascade)

  @@unique([showReviewId, characterId])
}

model SeasonReviewCharacter {
  id             Int          @id @default(autoincrement())
  seasonReviewId Int
  characterId    Int
  character      Character    @relation(fields: [characterId], references: [id])
  seasonReview   SeasonReview @relation(fields: [seasonReviewId], references: [id], onDelete: Cascade)

  @@unique([seasonReviewId, characterId])
}



model ShowReviewTag {
  id           Int        @id @default(autoincrement())
  showReviewId Int
  tagId        Int
  showReview   ShowReview @relation(fields: [showReviewId], references: [id], onDelete: Cascade)
  tag          Tag        @relation(fields: [tagId], references: [id])

  @@unique([showReviewId, tagId])
}

model SeasonReviewTag {
  id             Int          @id @default(autoincrement())
  seasonReviewId Int
  tagId          Int
  seasonReview   SeasonReview @relation(fields: [seasonReviewId], references: [id], onDelete: Cascade)
  tag            Tag          @relation(fields: [tagId], references: [id])

  @@unique([seasonReviewId, tagId])
}

model EpisodeReviewTag {
  id              Int           @id @default(autoincrement())
  episodeReviewId Int
  tagId           Int
  episodeReview   EpisodeReview @relation(fields: [episodeReviewId], references: [id], onDelete: Cascade)
  tag             Tag           @relation(fields: [tagId], references: [id])

  @@unique([episodeReviewId, tagId])
}

model Like {
  id              Int            @id @default(autoincrement())
  userId          String
  showReviewId    Int?
  seasonReviewId  Int?
  episodeReviewId Int?
  watchListId     Int?
  discussionId    Int?
  predictionId    Int?
  createdAt       DateTime       @default(now())
  episodeReview   EpisodeReview? @relation(fields: [episodeReviewId], references: [id], onDelete: Cascade)
  seasonReview    SeasonReview?  @relation(fields: [seasonReviewId], references: [id], onDelete: Cascade)
  showReview      ShowReview?    @relation(fields: [showReviewId], references: [id], onDelete: Cascade)
  watchList       WatchList?     @relation(fields: [watchListId], references: [id], onDelete: Cascade)
  discussion      Discussion?    @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  prediction      Prediction?    @relation(fields: [predictionId], references: [id], onDelete: Cascade)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, showReviewId])
  @@unique([userId, seasonReviewId])
  @@unique([userId, episodeReviewId])
  @@unique([userId, watchListId])
  @@unique([userId, discussionId])
  @@unique([userId, predictionId])
}

model ReviewComment {
  id              Int            @id @default(autoincrement())
  content         String
  userId          String
  showReviewId    Int?
  seasonReviewId  Int?
  episodeReviewId Int?
  createdAt       DateTime       @default(now())
  episodeReview   EpisodeReview? @relation(fields: [episodeReviewId], references: [id], onDelete: Cascade)
  seasonReview    SeasonReview?  @relation(fields: [seasonReviewId], references: [id], onDelete: Cascade)
  showReview      ShowReview?    @relation(fields: [showReviewId], references: [id], onDelete: Cascade)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WatchList {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  userId      String
  isPublic    Boolean           @default(true)
  friendsOnly Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  shows       WatchListShow[]
  tags        WatchListTag[]
  comments    WatchListComment[]
  likes       Like[]

  @@index([userId])
  @@index([isPublic])
  @@index([friendsOnly])
}

model WatchListShow {
  id          Int       @id @default(autoincrement())
  watchListId Int
  showId      Int
  ranking     Int?
  note        String?
  spoiler     Boolean   @default(false)
  addedAt     DateTime  @default(now())
  watchList   WatchList @relation(fields: [watchListId], references: [id], onDelete: Cascade)
  show        Show      @relation(fields: [showId], references: [id])
  muchWatchSeasons WatchListShowSeason[]

  @@unique([watchListId, showId])
  @@index([watchListId, ranking])
}

model WatchListTag {
  id          Int       @id @default(autoincrement())
  watchListId Int
  tagId       Int
  watchList   WatchList @relation(fields: [watchListId], references: [id], onDelete: Cascade)
  tag         Tag       @relation(fields: [tagId], references: [id])

  @@unique([watchListId, tagId])
}

model WatchListComment {
  id          Int       @id @default(autoincrement())
  content     String
  userId      String
  watchListId Int
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  watchList   WatchList @relation(fields: [watchListId], references: [id], onDelete: Cascade)

  @@index([watchListId])
}

model WatchListShowSeason {
  id              Int           @id @default(autoincrement())
  watchListShowId Int
  seasonId        Int
  watchListShow   WatchListShow @relation(fields: [watchListShowId], references: [id], onDelete: Cascade)
  season          Season        @relation(fields: [seasonId], references: [id])

  @@unique([watchListShowId, seasonId])
}

model Discussion {
  id          Int               @id @default(autoincrement())
  title       String
  content     String
  userId      String
  showId      Int?
  seasonId    Int?
  episodeId   Int?
  spoiler     Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  show        Show?             @relation(fields: [showId], references: [id], onDelete: Cascade)
  season      Season?           @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  episode     Episode?          @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  comments    DiscussionComment[]
  tags        DiscussionTag[]
  likes       Like[]
  polls       Poll[]

  @@index([userId])
  @@index([showId])
  @@index([seasonId])
  @@index([episodeId])
  @@index([createdAt])
}

model DiscussionComment {
  id           Int                     @id @default(autoincrement())
  content      String
  userId       String
  discussionId Int
  parentId     Int?
  depth        Int                     @default(0)
  path         String                  // Materialized path for ordering (e.g., "000001.000123.000456")
  spoiler      Boolean                 @default(false)
  isDeleted    Boolean                 @default(false)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  discussion   Discussion              @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  parent       DiscussionComment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies      DiscussionComment[]     @relation("CommentReplies")
  reactions    Reaction[]
  votes        DiscussionCommentVote[]

  @@index([discussionId])
  @@index([userId])
  @@index([parentId])
  @@index([depth])
  @@index([path])
  @@index([discussionId, path])
  @@index([discussionId, createdAt])
}

model DiscussionCommentVote {
  id                  Int               @id @default(autoincrement())
  discussionCommentId Int
  userId              String
  value               VoteValue         // 1 = upvote, -1 = downvote
  createdAt           DateTime          @default(now())
  discussionComment   DiscussionComment @relation(fields: [discussionCommentId], references: [id], onDelete: Cascade)
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([discussionCommentId, userId])
  @@index([discussionCommentId])
  @@index([userId])
}

enum VoteValue {
  DOWNVOTE @map("-1")
  UPVOTE   @map("1")
}

model DiscussionTag {
  id           Int        @id @default(autoincrement())
  discussionId Int
  tagId        Int
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  tag          Tag        @relation(fields: [tagId], references: [id])

  @@unique([discussionId, tagId])
}

model ReactionType {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  emoji       String?    // Optional emoji representation
  category    String?    // "positive", "negative", "emotional", "reality-tv"
  createdAt   DateTime   @default(now())
  reactions   Reaction[]
  predictionReactions PredictionReaction[]
  predictionCommentReactions PredictionCommentReaction[]

  @@index([name])
  @@index([category])
}

model Reaction {
  id                  Int               @id @default(autoincrement())
  userId              String
  reactionTypeId      Int
  discussionCommentId Int?
  episodeId           Int?
  createdAt           DateTime          @default(now())
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactionType        ReactionType      @relation(fields: [reactionTypeId], references: [id], onDelete: Cascade)
  discussionComment   DiscussionComment? @relation(fields: [discussionCommentId], references: [id], onDelete: Cascade)
  episode             Episode?          @relation(fields: [episodeId], references: [id])

  @@unique([userId, discussionCommentId])
  @@unique([userId, episodeId])
  @@index([userId])
  @@index([reactionTypeId])
  @@index([discussionCommentId])
  @@index([episodeId])
}

model Poll {
  id           Int        @id @default(autoincrement())
  question     String
  discussionId Int
  closesAt     DateTime?
  createdAt    DateTime   @default(now())
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  options      PollOption[]

  @@index([discussionId])
}

model PollOption {
  id      Int       @id @default(autoincrement())
  text    String
  pollId  Int
  poll    Poll      @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes   PollVote[]

  @@index([pollId])
}

model PollVote {
  id           Int        @id @default(autoincrement())
  userId       String
  pollOptionId Int
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)

  @@unique([userId, pollOptionId])
  @@index([userId])
  @@index([pollOptionId])
}

model PredictionTemplate {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  template    String   // The template string with placeholders like "X will be eliminated"
  showTypes   String[] // Array of show types this template applies to
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  predictions Prediction[]

  @@index([showTypes])
  @@index([isActive])
}

model Prediction {
  id             Int                    @id @default(autoincrement())
  title          String
  content        String
  userId         String
  episodeId      Int
  characterId    Int                    // The contestant being predicted about (required)
  templateId     Int                    // Which prediction template was used
  predictionText String                 // The actual prediction text (e.g., "John will be eliminated")
  closesAt       DateTime               // When predictions close (6 hours before episode airs)
  isActive       Boolean                @default(true)
  spoiler        Boolean                @default(false)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  
  user           User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  episode        Episode                @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  character      Character              @relation(fields: [characterId], references: [id], onDelete: Cascade)
  template       PredictionTemplate     @relation(fields: [templateId], references: [id])
  
  comments       PredictionComment[]
  shares         PredictionShare[]
  reactions      PredictionReaction[]
  result         PredictionResult?
  likes          Like[]

  @@index([userId])
  @@index([episodeId])
  @@index([characterId])
  @@index([templateId])
  @@index([closesAt])
  @@index([isActive])
  @@index([createdAt])
}

model PredictionComment {
  id           Int                     @id @default(autoincrement())
  content      String
  userId       String
  predictionId Int
  parentId     Int?                   // For threaded comments
  depth        Int                    @default(0)
  path         String                 // Materialized path for ordering (e.g., "000001.000123.000456")
  isDeleted    Boolean                @default(false)
  isPreClose   Boolean                @default(true) // Whether comment was made before prediction closed
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  
  user         User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  prediction   Prediction             @relation(fields: [predictionId], references: [id], onDelete: Cascade)
  parent       PredictionComment?     @relation("PredictionCommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies      PredictionComment[]    @relation("PredictionCommentReplies")
  reactions    PredictionCommentReaction[]
  votes        PredictionCommentVote[]

  @@index([predictionId])
  @@index([userId])
  @@index([parentId])
  @@index([depth])
  @@index([path])
  @@index([predictionId, path])
  @@index([predictionId, createdAt])
  @@index([isPreClose])
}

model PredictionCommentVote {
  id                  Int               @id @default(autoincrement())
  predictionCommentId Int
  userId              String
  value               VoteValue         // 1 = upvote, -1 = downvote
  createdAt           DateTime          @default(now())
  predictionComment   PredictionComment @relation(fields: [predictionCommentId], references: [id], onDelete: Cascade)
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([predictionCommentId, userId])
  @@index([predictionCommentId])
  @@index([userId])
}

model PredictionCommentReaction {
  id                  Int               @id @default(autoincrement())
  userId              String
  reactionTypeId      Int
  predictionCommentId Int
  createdAt           DateTime          @default(now())
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactionType        ReactionType      @relation(fields: [reactionTypeId], references: [id], onDelete: Cascade)
  predictionComment   PredictionComment @relation(fields: [predictionCommentId], references: [id], onDelete: Cascade)

  @@unique([userId, predictionCommentId])
  @@index([userId])
  @@index([reactionTypeId])
  @@index([predictionCommentId])
}

model PredictionShare {
  id           Int        @id @default(autoincrement())
  userId       String
  predictionId Int
  side         ShareSide  // YES or NO
  amount       Int        // Number of shares purchased
  price        Float      // Price per share when purchased
  totalCost    Float      // Total cost (amount * price)
  createdAt    DateTime   @default(now())
  
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  prediction   Prediction @relation(fields: [predictionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([predictionId])
  @@index([side])
}

model PredictionReaction {
  id           Int               @id @default(autoincrement())
  userId       String
  reactionTypeId Int
  predictionId Int
  createdAt    DateTime          @default(now())
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactionType ReactionType      @relation(fields: [reactionTypeId], references: [id], onDelete: Cascade)
  prediction   Prediction        @relation(fields: [predictionId], references: [id], onDelete: Cascade)

  @@unique([userId, predictionId])
  @@index([userId])
  @@index([reactionTypeId])
  @@index([predictionId])
}

model PredictionResult {
  id           Int                @id @default(autoincrement())
  predictionId Int                @unique
  outcome      PredictionOutcome  // YES, NO, or PENDING
  confidence   Float?             // AI confidence score (0-1)
  source       ResultSource       // AI, WIKIPEDIA, MANUAL, or PENDING
  evidence     String?            // Evidence or reasoning for the result
  resolvedAt   DateTime?          // When the result was determined
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  
  prediction   Prediction         @relation(fields: [predictionId], references: [id], onDelete: Cascade)

  @@index([outcome])
  @@index([source])
  @@index([resolvedAt])
}

enum ShareSide {
  YES
  NO
}

enum PredictionOutcome {
  YES
  NO
  PENDING
}

enum ResultSource {
  AI
  WIKIPEDIA
  MANUAL
  PENDING
}

model UserActivity {
  id          Int           @id @default(autoincrement())
  userId      String
  activityType ActivityType
  entityType  EntityType?   // What type of entity was interacted with
  entityId    Int?          // ID of the entity (show, episode, review, etc.)
  points      Int           // Points earned from this activity
  description String?       // Human-readable description
  metadata    Json?         // Additional data (e.g., review length, comment depth)
  isPublic    Boolean       @default(true) // Whether to show on public profile
  giverId     String?       // Who performed the action (for likes, votes, etc.)
  createdAt   DateTime      @default(now())
  
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  giver       User?         @relation("ActivityGiver", fields: [giverId], references: [id], onDelete: Cascade)
  activityGroupMapping ActivityGroupMapping? @relation(fields: [activityType], references: [activityType])

  @@index([userId])
  @@index([activityType])
  @@index([entityType])
  @@index([isPublic])
  @@index([giverId])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([userId, isPublic, createdAt])
  @@index([userId, isPublic, activityType])
  @@index([giverId, createdAt])
}

model UserPoints {
  id          Int      @id @default(autoincrement())
  userId      String   @unique
  balance     Int      @default(0) // Current point balance
  totalEarned Int      @default(0) // Total points ever earned
  totalSpent  Int      @default(0) // Total points ever spent
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([balance])
  @@index([lastUpdated])
}

model UserActivityPrivacy {
  id              Int           @id @default(autoincrement())
  userId          String
  activityGroup   ActivityGroup
  isPublic        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, activityGroup])
  @@index([userId])
  @@index([activityGroup])
}

enum ActivityGroup {
  CONTENT_CREATION
  ENGAGEMENT
  DISENGAGEMENT
  PREDICTION_MARKET
  SOCIAL
}

model ActivityGroupMapping {
  id            Int           @id @default(autoincrement())
  activityType  ActivityType
  activityGroup ActivityGroup
  createdAt     DateTime      @default(now())

  userActivities UserActivity[]

  @@unique([activityType])
  @@index([activityGroup])
}

model PointsTransaction {
  id          Int                @id @default(autoincrement())
  userId      String
  amount      Int                // Positive for earned, negative for spent
  type        TransactionType
  description String
  referenceId Int?               // ID of related entity (prediction, review, etc.)
  referenceType String?           // Type of reference (prediction, review, etc.)
  createdAt   DateTime           @default(now())
  
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([userId, createdAt])
}

enum ActivityType {
  // Content creation
  REVIEW_CREATED
  DISCUSSION_CREATED
  WATCHLIST_CREATED
  PREDICTION_CREATED
  COMMENT_CREATED
  
  // Engagement
  REVIEW_LIKED
  REVIEW_UNLIKED
  DISCUSSION_LIKED
  DISCUSSION_UNLIKED
  WATCHLIST_LIKED
  WATCHLIST_UNLIKED
  PREDICTION_LIKED
  PREDICTION_UNLIKED
  COMMENT_UPVOTED
  COMMENT_DOWNVOTED
  
  // Prediction market
  SHARES_PURCHASED
  SHARES_SOLD
  PREDICTION_WON
  PREDICTION_LOST
  
  // Social
  USER_FOLLOWED
  USER_UNFOLLOWED
}

enum EntityType {
  SHOW
  SEASON
  EPISODE
  CHARACTER
  REVIEW
  DISCUSSION
  WATCHLIST
  PREDICTION
  COMMENT
  USER
}

enum TransactionType {
  EARNED
  SPENT
  BONUS
  PENALTY
  REFUND
  DEDUCTED
}

